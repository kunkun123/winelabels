package org.gecko.framework.tax.controller;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.spi.LoggerFactory;
import org.gecko.common.utils.GeckoProperties;
import org.gecko.common.utils.ReflectUtil;
import org.gecko.common.utils.UuidUtil;
import org.gecko.core.annotations.GeckoAuthority;
import org.gecko.core.mybatis.page.Page;
import org.gecko.framework.base.BaseController;
import org.gecko.framework.ent.entity.EntEntbasic;
import org.gecko.framework.ent.entity.enums.EntType;
import org.gecko.framework.ent.entity.enums.ProductType;
import org.gecko.framework.ent.service.EntEntbasicService;
import org.gecko.framework.model.R;
import org.gecko.framework.system.entity.Account;
import org.gecko.framework.system.service.AccountService;
import org.gecko.framework.utils.GenerateIdUtils;
import org.gecko.framework.wineLabels.entity.AlAlcoholflow;
import org.gecko.framework.wineLabels.entity.AlAlcohollable;
import org.gecko.framework.wineLabels.entity.AlCirculation;
import org.gecko.framework.wineLabels.entity.AlProduct;
import org.gecko.framework.wineLabels.entity.enums.WineLablesStatus;
import org.gecko.framework.wineLabels.service.AlAlcoholflowService;
import org.gecko.framework.wineLabels.service.AlAlcohollableService;
import org.gecko.framework.wineLabels.service.AlCirculationService;
import org.gecko.framework.wineLabels.service.AlProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import oracle.sql.DATE;


/**
 * 商品表控制器
 * @author Gecko Generator
 * @email admin@aisino.com
 * @date 2018-01-08 11:25:28
 *
 */
@Controller
@RequestMapping("/tax/alcirculation")
public class TagAlCirculationController extends BaseController<AlProduct> {
	@Autowired
	public AlCirculationService service;
	@Autowired
	public AccountService accountService;
	@Autowired
	public AlAlcoholflowService alcoholflowService;
	@Autowired
	public AlAlcohollableService alcohollabelService;
	@Autowired
	public AlProductService alProductService;
	@Autowired
	public EntEntbasicService entbasicService;
	/**
	 * 销售采集的页面跳转
	 * @return
	 */
	@RequestMapping(value = "/sellCollectionView", method = {RequestMethod.POST,RequestMethod.GET})
	public ModelAndView productionCollectionView() {
		ModelAndView mad = new ModelAndView("/views/tax/sellCollection.jsp");
		return mad;
	}
	/**
	 * 应税确认的页面跳转
	 * @return
	 */
	@RequestMapping(value = "/taxConfirmView", method = {RequestMethod.POST,RequestMethod.GET})
	public ModelAndView taxConfirmView() {
		ModelAndView mad = new ModelAndView("/views/tax/taxConfirm.jsp");
		return mad;
	}
	/**
     * save 保存对象
     * @param entity
     * @return R返回类型
     */
	@RequestMapping(value = "/addTask", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	public ModelAndView save(AlProduct entity,HttpSession session) {
		ModelAndView mad = new ModelAndView("/tax/alproduct/productionCollectionView");
		if(null != entity.getId() && StringUtils.isNoneBlank(String.valueOf(entity.getId()))) {
			//service.update(entity);
		} else {
            if (org.springframework.util.StringUtils.isEmpty(entity.getId())) {
                entity.setId(GenerateIdUtils.generateId10());
                /**
                 * 创建者和创建日期
                 */
                Account acct = (Account) session.getAttribute(GeckoProperties.SESSION_KEY);
                entity.setCreator(acct.getId());
                Date now = new Date(); 
                entity.setCreatedate(new java.sql.Date(now.getTime()));
            }
		}
		return mad;
	}
	/**
     * save 保存对象
     * @param entity
     * @return R返回类型
     */
	@RequestMapping(value = "/editTask", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	public ModelAndView edit(AlProduct entity,HttpSession session) {
		ModelAndView mad = save(entity,session);
		return mad;
	}
	/**
	 * 销售采集的历史信息的列表展示
	 */
	@RequestMapping(value = "/hisCollectionList", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	//@GeckoAuthority(codes = {"GECKO_WINELABELS_AL_PRODUCT_QUERY"})
	public List<AlCirculation> hisCollectionList(HttpServletRequest request) throws ParseException {
        AlCirculation param = new AlCirculation();
        String winelabelCode = request.getParameter("winelabelCode");
        String winelabeltype = request.getParameter("winelabeltype");
        String productname = request.getParameter("productname");
        String prodcttype = request.getParameter("producttype");
        String belowEntId = request.getParameter("belowent");
        String startDate = request.getParameter("startDate");
        String endDate = request.getParameter("endDate");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if(!org.springframework.util.StringUtils.isEmpty(winelabelCode)){
        	//酒标编号
        	param.setTemp1(winelabelCode);
        }
        if(!org.springframework.util.StringUtils.isEmpty(winelabeltype)){
        	//酒标类型
        	//param.setTemp2(winelabeltype);
        }
        if(!org.springframework.util.StringUtils.isEmpty(productname)){
        	//对应商品名称
        	param.setTemp3(productname);
        }
        if(!org.springframework.util.StringUtils.isEmpty(prodcttype)){
        	//对应商品种类
        	param.setTemp4(prodcttype);
        }
        if(!org.springframework.util.StringUtils.isEmpty(belowEntId)){
        	param.setBelowentid(belowEntId);
        }
        if(!org.springframework.util.StringUtils.isEmpty(startDate)){
        	Date date = sdf.parse(startDate);
        	param.setStarttime(new java.sql.Date(date.getTime()));
        }
        if(!org.springframework.util.StringUtils.isEmpty(endDate)){
        	Date date = sdf.parse(endDate);
        	param.setStarttime(new java.sql.Date(date.getTime()));
        }
        List<AlCirculation> alCirculations = service.findHisAlCirculationByParam(param);
        //用于前台展示的list
        List<AlCirculation> alCirculationsShow = new ArrayList<AlCirculation>();
        for (Iterator iterator = alCirculations.iterator(); iterator.hasNext();) {
			AlCirculation alCirculation = (AlCirculation) iterator.next();
			String saleLinkId = alCirculation.getId();
			if(!org.springframework.util.StringUtils.isEmpty(saleLinkId)){
				AlAlcoholflow alcoholflow = new AlAlcoholflow();
				alcoholflow.setSalelinkid(saleLinkId);
				List<AlAlcoholflow> alcoholflows = alcoholflowService.find(alcoholflow);
				for (Iterator iterator2 = alcoholflows.iterator(); iterator2.hasNext();) {
					AlAlcoholflow alAlcoholflow = (AlAlcoholflow) iterator2.next();
					AlCirculation alCirculationShow = new AlCirculation();
					String entId = alCirculation.getBelowentid();
					EntEntbasic entBasic = entbasicService.get(entId);
					if(null!=entBasic){
						alCirculationShow.setBelowentid(entBasic.getEntname());
					}
					alCirculationShow.setEndtime(alCirculation.getEndtime());
					alCirculationShow.setStarttime(alCirculation.getStarttime());
					alCirculationShow.setProductnum(alCirculation.getProductnum());
					//酒标编号
					alCirculationShow.setTemp1(alAlcoholflow.getSerial());
					AlAlcohollable alcohollable = new AlAlcohollable();
					alcohollable.setSerial(alAlcoholflow.getSerial());
					List<AlAlcohollable> alcohollables = alcohollabelService.find(alcohollable);
					if(alcohollables.size()>0){
						alcohollable = alcohollables.get(0);
						//酒标类型
						alCirculationShow.setTemp2(alcohollable.getType().getValue());
					}
					AlProduct alproduct = new AlProduct();
					alproduct.setId(alcohollable.getProductid());
					List<AlProduct> alproducts = alProductService.find(alproduct);
					if(alproducts.size()>0){
						alproduct = alproducts.get(0);
						//商品名称
						alCirculationShow.setTemp3(alproduct.getProductname());
						//商品类型
						alCirculationShow.setTemp4(alproduct.getProducttype().getValue());
					}
					alCirculationsShow.add(alCirculationShow);
				}
			}
		}
        return alCirculationsShow;
	}
	/**
	 * 销售环节的列表展示
	 */
	@RequestMapping(value = "/saleLinkList", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	//@GeckoAuthority(codes = {"GECKO_WINELABELS_AL_PRODUCT_QUERY"})
	public List<AlCirculation> saleLinkList(HttpServletRequest request) throws ParseException {
        AlCirculation param = new AlCirculation();
        String belowEntId = request.getParameter("belowent");
        
        if(!org.springframework.util.StringUtils.isEmpty(belowEntId)){
        	param.setBelowentid(belowEntId);
        }
       
        List<AlCirculation> alCirculations = service.findHisAlCirculationByParam(param);
        //用于前台展示的list
        List<AlCirculation> alCirculationsShow = new ArrayList<AlCirculation>();
        for (Iterator iterator = alCirculations.iterator(); iterator.hasNext();) {
			AlCirculation alCirculation = (AlCirculation) iterator.next();
			AlCirculation alCirculationShow = new AlCirculation();
			String entId = alCirculation.getBelowentid();
			EntEntbasic entBasic = entbasicService.get(entId);
			if(null!=entBasic){
				alCirculationShow.setBelowentid(entBasic.getEntname());
			}
			alCirculationShow.setTemp1(entId);
			alCirculationShow.setEndtime(alCirculation.getEndtime());
			alCirculationShow.setStarttime(alCirculation.getStarttime());
			alCirculationShow.setProductnum(alCirculation.getProductnum());
			alCirculationsShow.add(alCirculationShow);
		}
        return alCirculationsShow;
	}
	/**
	 * 应税确认
	 */
	@RequestMapping(value = "/taxConfirm", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	//@GeckoAuthority(codes = {"GECKO_WINELABELS_AL_PRODUCT_QUERY"})
	public ModelAndView taxConfirm(HttpServletRequest request){
		ModelAndView mad = new ModelAndView("/tax/alproduct/productionCollectionView");
		String winelabelId = request.getParameter("winelabelId");
		String type = request.getParameter("type");
		AlAlcohollable winelabelParam = new AlAlcohollable();
		winelabelParam.setSerial(winelabelId);
		List<AlAlcohollable> winelabels =alcohollabelService.find(winelabelParam);
		AlAlcohollable winelabel = null;
		if(winelabels.size()>0){
			winelabel = winelabels.get(0);
		}
		if(null!=winelabel){
			/**箱标**/
			if(winelabel.getType().getKey()==2){
				AlAlcohollable bottomAlcohollable = new AlAlcohollable();
				bottomAlcohollable.setBoxlable(winelabelId);
				List<AlAlcohollable> bottomAlcohollables = alcohollabelService.find(bottomAlcohollable);
				for (Iterator iterator = bottomAlcohollables.iterator(); iterator.hasNext();) {
					AlAlcohollable alAlcohollable = (AlAlcohollable)iterator.next();
					if("confirm".equals(type)){
						//酒标的状态设置为流转中
						alAlcohollable.setStatus(WineLablesStatus.CIRCULATIONING);
						alcohollabelService.update(alAlcohollable);
					}else if("cancel".equals(type)){
						//酒标的状态设置为未流转
						alAlcohollable.setStatus(WineLablesStatus.UNCIRCULATION);
						alcohollabelService.update(alAlcohollable);
					}
					
				}
			}
			if("confirm".equals(type)){
				//酒标的状态设置为流转中
				winelabel.setStatus(WineLablesStatus.CIRCULATIONING);
			}else if("cancel".equals(type)){
				//酒标的状态设置为未流转
				winelabel.setStatus(WineLablesStatus.UNCIRCULATION);
			}
			alcohollabelService.update(winelabel);
		}
		return mad;
	}
	
	/**
	 * 根据ID列表批量删除对象
	 * @param ids 唯一ID列表
	 * @return R 返回类型
	 */
    @RequestMapping(value = "/delete", method = {RequestMethod.DELETE,RequestMethod.GET})
	@ResponseBody
	//@GeckoAuthority(codes = {"GECKO_WINELABELS_AL_PRODUCT_DELETE"})
	public ModelAndView delete(@RequestParam("ids")String[] ids) {
    	ModelAndView mad = new ModelAndView("/tax/alproduct/productionCollectionView");
		service.batchDelete(ids);
		return mad;
	}
}
