package org.gecko.framework.tax.controller;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.spi.LoggerFactory;
import org.gecko.common.utils.GeckoProperties;
import org.gecko.common.utils.ReflectUtil;
import org.gecko.common.utils.UuidUtil;
import org.gecko.core.annotations.GeckoAuthority;
import org.gecko.core.mybatis.page.Page;
import org.gecko.framework.base.BaseController;
import org.gecko.framework.ent.entity.enums.EntType;
import org.gecko.framework.ent.entity.enums.ProductType;
import org.gecko.framework.model.R;
import org.gecko.framework.system.entity.Account;
import org.gecko.framework.system.service.AccountService;
import org.gecko.framework.utils.GenerateIdUtils;
import org.gecko.framework.wineLabels.entity.AlProduct;
import org.gecko.framework.wineLabels.entity.enums.WineLablesType;
import org.gecko.framework.wineLabels.service.AlProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import oracle.sql.DATE;


/**
 * 商品表控制器
 * @author Gecko Generator
 * @email admin@aisino.com
 * @date 2018-01-08 11:25:28
 *
 */
@Controller
@RequestMapping("/tax/alproduct")
public class TagAlProductController extends BaseController<AlProduct> {
	@Autowired
	public AlProductService service;
	@Autowired
	public AccountService accountService;
	
	@Autowired
	public JmsTemplate jmsTemplate;
	@Resource
	public Destination queueDestination;
	/**
	 * 生产采集的页面跳转
	 * @return
	 */
	@RequestMapping(value = "/productionCollectionView", method = {RequestMethod.POST,RequestMethod.GET})
	public ModelAndView productionCollectionView() {
		ModelAndView mad = new ModelAndView("/views/tax/productionCollection.jsp");
		return mad;
	}
	/**
     * 添加生产任务
     * @param entity
     * @return R返回类型
     */
	@RequestMapping(value = "/addTask", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	public ModelAndView save(final AlProduct entity,HttpSession session) {
		ModelAndView mad = new ModelAndView("/tax/alproduct/productionCollectionView");
		if(null != entity.getId() && StringUtils.isNoneBlank(String.valueOf(entity.getId()))) {
			service.update(entity);
		} else {
            if (org.springframework.util.StringUtils.isEmpty(entity.getId())) {
            	entity.setId(GenerateIdUtils.generateId32());
                /**
                 * 创建者和创建日期
                 */
                Account acct = (Account) session.getAttribute(GeckoProperties.SESSION_KEY);
                entity.setCreator(acct.getId());
                Date now = new Date(); 
                entity.setCreatedate(new java.sql.Date(now.getTime()));
                entity.setCollectiontype(WineLablesType.BOX);
                entity.setLastupdatetime(GenerateIdUtils.getCurrentSqlDate());
                String specStr = entity.getSpec();
                int spec = 0;
                if(org.springframework.util.StringUtils.isEmpty(specStr)){
                	spec = Integer.parseInt(specStr);
                	if(spec==1){
                		entity.setCollectiontype(WineLablesType.BOTTLE);
                	}else if(spec>1){
                		entity.setCollectiontype(WineLablesType.BOX);
                	}else{
                		entity.setCollectiontype(WineLablesType.NONE);
                	}
                }
                //未进行生产采集
                entity.setTemp1("0");
                service.save(entity);
                /**如果是箱装则spec》1，需分别建立瓶装商品信息**/
                for (int i = 1; i < spec+1; i++) {
						AlProduct alproduct = new  AlProduct();
						alproduct.setId(GenerateIdUtils.generateId32());
						alproduct.setProductname(entity.getProductname());
						alproduct.setSpec("1");
						alproduct.setCollectiontype(WineLablesType.BOX);
						alproduct.setCreator(acct.getId());
						alproduct.setCreatedate(new java.sql.Date(now.getTime()));
						alproduct.setLastupdatetime(new java.sql.Date(now.getTime()));
						alproduct.setProducttype(entity.getProducttype());
						//箱装的产品表ID
						alproduct.setTemp1(entity.getId());
						service.save(alproduct);
				}
            }
		}
		return mad;
	}
	/**
     * save 保存对象
     * @param entity
     * @return R返回类型
     */
	@RequestMapping(value = "/editTask", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	public ModelAndView edit(AlProduct entity,HttpSession session) {
		ModelAndView mad = save(entity,session);
		return mad;
	}
	/**
	 * 数据列表
	 * @param page 分页设置
	 * @param search 查询参数
	 * @param order 排序
	 * @return R返回类型
	 */
	@RequestMapping(value = "/list", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	//@GeckoAuthority(codes = {"GECKO_WINELABELS_AL_PRODUCT_QUERY"})
	public List<AlProduct> list(HttpSession session) {
        Account account = (Account) session.getAttribute(GeckoProperties.SESSION_KEY);
        List<AlProduct> alProductListShow = new ArrayList<AlProduct>(); 
        if(null!=account){
        	AlProduct param = new AlProduct();
        	param.setCreator(account.getId());
        	//未进行生产采集
        	param.setTemp1("0");
        	List<AlProduct> alProductList = service.find(param);
        	for (Iterator iterator = alProductList.iterator(); iterator.hasNext();) {
    			AlProduct alProduct = (AlProduct) iterator.next();
    			String accountId = alProduct.getCreator();
    			if(!org.springframework.util.StringUtils.isEmpty(accountId)){
    				Account acc = accountService.get(accountId);
    				alProduct.setCreator(acc.getRealName());
    			}
    			ProductType productType = alProduct.getProducttype();
    			if(null!=productType){
    				//商品种类
    				alProduct.setTemp1(productType.getValue());
    			}
    			alProductListShow.add(alProduct);
    		}
        }
		return alProductListShow;
	}
	/**
	 * 根据ID列表批量删除对象
	 * @param ids 唯一ID列表
	 * @return R 返回类型
	 */
    @RequestMapping(value = "/delete", method = {RequestMethod.DELETE,RequestMethod.GET})
	@ResponseBody
	//@GeckoAuthority(codes = {"GECKO_WINELABELS_AL_PRODUCT_DELETE"})
	public ModelAndView delete(@RequestParam("ids")String[] ids) {
    	ModelAndView mad = new ModelAndView("/tax/alproduct/productionCollectionView");
		service.batchDelete(ids);
		return mad;
	}
    /**
     * 生产采集
     * @param entity
     * @return R返回类型
     */
	@RequestMapping(value = "/productCollection", method = {RequestMethod.POST,RequestMethod.GET})
	@ResponseBody
	public ModelAndView productCollection(@RequestBody String[] checkedIds, HttpSession session,HttpServletRequest request) {
		ModelAndView mad = new ModelAndView("/tax/alproduct/productionCollectionView");
		Account account = (Account) session.getAttribute(GeckoProperties.SESSION_KEY);
		final String accountId = account.getId();
		for (int i = 0; i < checkedIds.length; i++) {
			final String taskId = checkedIds[i];
			/**生产任务入队**/
			// 发消息
			jmsTemplate.send(queueDestination, new MessageCreator() {
				@Override
				public Message createMessage(Session session) throws JMSException {
					return session.createTextMessage(taskId+"."+accountId);
				}
			});
		}

		return mad;
	}
}
